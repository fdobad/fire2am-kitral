# -*- coding: utf-8 -*-
#REPLENV: /home/fdo/pyenv/qgis
"""
/***************************************************************************
 fire2amClass
                                 A QGIS plugin
 Simulate a forest fires under different weather and fire model scenarios
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by fdobadvel (gui) & fire2a team
        email                : fire2a@fire2a.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import re
import sys
from datetime import datetime, timedelta
from functools import partial
from glob import glob
from multiprocessing import cpu_count
from os import sep
from pathlib import Path
from shlex import split as shlex_split
from shutil import copy
import networkx as nx

from scipy import stats
import numpy as np
import processing

from pandas import DataFrame, Series, Timestamp, concat, read_csv
# pylint: disable=no-name-in-module
from qgis.core import (Qgis, QgsApplication, QgsCoordinateReferenceSystem,
                       QgsFeature, QgsField, QgsGeometry, QgsMapLayerType,
                       QgsMessageLog, QgsPointXY, QgsProject,
                       QgsRasterBandStats, QgsRasterLayer,
                       QgsTask, QgsVectorFileWriter, QgsVectorLayer,
                       QgsWkbTypes)
from qgis.PyQt.Qt import Qt
from qgis.PyQt.QtCore import (QCoreApplication, QProcess, QSettings,
                              QTranslator, QVariant)
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QCheckBox, QDoubleSpinBox, QSpinBox
# pylint: enable=no-name-in-module

from .fire2am_argparse import fire2amClassDialogArgparse
from .fire2am_bkgdTask import (after_ForestGrid, after_asciiDir, afterTask_logFile2, after_betweenness_centrality)
# Import the code for the dialog
from .fire2am_dialog import fire2amClassDialog
from .fire2am_utils import check as fdoCheck
from .fire2am_utils import aName, get_params, log #, randomDataFrame
# Initialize Qt resources from file resources.py
from .img.resources import * # pylint: disable=wildcard-import, unused-wildcard-import
from .ParseInputs2 import Parser2
from .qgis_utils import (array2rasterFloat32, array2rasterInt16, id2xy,
                         check_gdal_driver_name, matchPoints2Raster,
                         matchRasterCellIds2points, mergeVectorLayers,
                         rasterRenderInterpolatedPseudoColor, writeVectorLayer, 
                         checkLayerPoints)

# For debugging
#import pdb
#from qgis.PyQt.QtCore import pyqtRemoveInputHook
# These lines allow you to set a breakpoint in the app
#pyqtRemoveInputHook()
#pdb.set_trace()
# This line enters into interactive
#(Pdb) !import code; code.interact(local=dict(globals(), **locals()))
# ?
#import warnings
#warnings.filterwarnings("ignore",message='Warning: QCoreApplication::exec: The event loop is already running')


class fire2amClass:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'fire2amClass_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Fire Simulator Analytics Management')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start_dialog = None
        self.first_start_argparse = None

        # argparse
        self.default_args, self.parser, self.groups = get_params(Parser2)
        self.gen_cmd = ''
        self.args = {}

        # global
        self.project = None
        self.crs = None
        self.extent = None
        self.geopackage = None

        # QProcess
        self.proc_dir = str(Path(self.plugin_dir,'C2FSB'))
        self.proc_exe = 'python3 main.py'
        self.proc = None
        self.name_state = { QProcess.ProcessState.NotRunning: 'Not running',
                            QProcess.ProcessState.Starting: 'Starting',
                            QProcess.ProcessState.Running: 'Running' }
        # QgsTask
        self.task = {} 
        self.taskManager = QgsApplication.taskManager()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('fire2amClass', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/fire2am/img/icon.png'
        self.add_action(
            icon_path,
            text = self.tr(u'%s: setup and run a forest fire simulation...'%aName),
            callback = self.run_Dialog,
            parent = self.iface.mainWindow())
        # dock start
        self.add_action(
            icon_path = ':/plugins/fire2am/img/icon_dev.png',
            text = self.tr(u'%s: all options (very experimental)'%aName),
            callback = self.run_Argparse,
            parent = self.iface.mainWindow(),
            add_to_toolbar = True)
        # dock end

        # will be set False in run()
        self.first_start_dialog = True
        self.first_start_argparse = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Fire Simulator Analytics Management'),
                action)
            self.iface.removeToolBarIcon(action)

    def run_Argparse(self):
        """Run method that performs all the real work"""
        if self.first_start_argparse == True:
            self.first_start_argparse = False
            self.argdlg = fire2amClassDialogArgparse()
        # show the dialog
        self.argdlg.show()
        # Run the dialog event loop
        result = self.argdlg.exec_()
        print('argdlg result',result)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def first_start_setup(self):
        ''' layers default names '''
        layers_byName = { l.name():l for l in QgsProject.instance().mapLayers().values()}
        for lname,layer in layers_byName.items():
            if re.match( 'model.*asc', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fuels.setLayer(layer)
            elif re.match( 'mdt.*asc', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_elevation.setLayer(layer)
            elif re.match( 'cbh', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_cbh.setLayer(layer)
            elif re.match( 'cbd', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_cbd.setLayer(layer)
            elif re.match( 'ccf', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_ccf.setLayer(layer)
            elif re.match( '^py', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_ignitionProbMap.setLayer(layer)
                self.dlg.radioButton_ignitionProbMap.setChecked(True)
            elif re.match( '[Ee]levation', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_elevation.setLayer(layer)
            elif re.match( '[Ff]uel', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fuels.setLayer(layer)
            elif re.match( '[Ii]gnition.*[Pp]rob', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_ignitionProbMap.setLayer(layer)
            elif re.match( '[Ii]gnition.*[Pp]oint', lname) and layer.type() == QgsMapLayerType.VectorLayer and layer.wkbType() == QgsWkbTypes.Point:
                self.dlg.layerComboBox_ignitionPoints.setLayer(layer)
        ''' weather file'''
        if apath := QgsProject.instance().absolutePath():
            wfile = Path( apath, 'Weather.csv')
            if wfile.is_file(): 
                self.dlg.fileWidget_weatherFile.setFilePath( str(wfile))
                self.dlg.radioButton_weatherFile.setChecked(True)
            ''' weather folder '''
            wfolder = Path( apath, 'Weathers')
            if wfolder.is_dir(): 
                self.dlg.fileWidget_weatherFolder.setFilePath( str(wfolder))
                self.dlg.radioButton_weatherFolder.setChecked(True)
            #self.dlg.args['nweathers'] = 0
        ''' default values '''
        self.dlg.spinBox_nthreads.setValue( max(cpu_count() - 1, 1))
        self.dlg.spinBox_nthreads.setMaximum(cpu_count())
        ''' prepare stats table '''
        st = stats.describe([0,1])
        df = DataFrame( ('Name',*st._fields), index=('Name',*st._fields), columns=['Attributes'])
        self.dlg.statdf = df
        self.dlg.tableView_1.setModel(self.dlg.PandasModel(df))

    def connect_slots(self):
        ''' main '''
        #self.dlg.tabWidget.currentChanged.connect(self.slot_tabWidget_currentChanged)
        self.dlg.pushButton_restoreDefaults.pressed.connect(self.slot_restoreDefaults)
        self.dlg.pushButton_run.pressed.connect(self.run_All)
        ''' tab landscape '''
        self.dlg.layerComboBox_fuels.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_elevation.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_cbh.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_cbd.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_ccf.layerChanged.connect( self.slot_trySelectRaster)
        ''' tab ignitions ''' 
        self.dlg.layerComboBox_ignitionPoints.layerChanged.connect(self.slot_layerComboBox_ignitionPoints_layerChanged)
        self.dlg.layerComboBox_ignitionProbMap.layerChanged.connect( self.slot_trySelectRaster)
        ''' tab weather '''
        self.dlg.fileWidget_weatherFile.fileChanged.connect( self.slot_fileWidget_weatherFile_fileChanged)
        self.dlg.fileWidget_weatherFolder.fileChanged.connect( self.slot_fileWidget_weatherFolder_fileChanged)
        self.dlg.pushButton_windRandomize.pressed.connect( self.slot_windRandomize)
        #self.dlg.radioButton_weatherFile.clicked.connect( self.slot_radioButton_weatherFile_clicked)
        #self.dlg.radioButton_weatherFolder.clicked.connect( self.slot_radioButton_weatherFolder_clicked)
        ''' tab run '''
        self.dlg.pushButton_dev.pressed.connect(self.externalProcess_start_dev)
        #self.dlg.pushButton_run.pressed.connect(self.externalProcess_start)
        self.dlg.pushButton_kill.pressed.connect(self.externalProcess_kill)
        self.dlg.pushButton_terminate.pressed.connect(self.externalProcess_terminate)
        self.dlg.pushButton.pressed.connect(self.slot_doit)
        ''' tab tables '''
        ''' tab graphs '''
        #self.dlg.comboBox_plot.currentIndexChanged.connect( self.showPlot)
        self.dlg.comboBox_plot.currentIndexChanged.connect( lambda index: self.dlg.plt.show(index))

    def slot_windRandomize(self):
       WD = np.random.randint(0,359)
       WS = np.random.randint(1,100)
       self.dlg.spinBox_windDirection.setValue(WD)
       self.dlg.spinBox_windSpeed.setValue(WS)

    def showPlot(self, index):
        log('showing!!!', level=4)
        self.dlg.plt.show(index)

    def run_Dialog(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_dialog == True:
            self.first_start_dialog  = False
            self.dlg = fire2amClassDialog()
            self.dlg.msgBar.pushMessage(aName+' Hello World!','Keep a project with layers open when interacting', duration=-1, level=Qgis.Info)
            self.slot_windRandomize()
            self.dlg.tabWidget.setCurrentIndex(0)
            self.first_start_setup()
            self.connect_slots()

        '''
        if QgsProject.instance().mapLayers() == {}:
            self.iface.messageBar().pushCritical(aName+': No layers found', 'Open a project with layers and try again')
            log('Open a project with layers and restore defaults', pre='No layers found', level=3)
            return

        if self.project != QgsProject().instance():
            old = self.project
            self.project = QgsProject().instance()
            log( 'Old: %s %s New: %s %s'%( old.absoluteFilePath(), old.baseName(),
                                  self.project.absoluteFilePath(), self.project.baseName()), pre='Project Changed!', level=3, msgBar=self.dlg.msgBar)
        '''
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        print('result',result)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def makeInstance(self):
        '''mkdir directory, TODO from:copy&paste files to:write layers as new files
        '''
        if os.path.isdir( self.args['InFolder']):
            log( 'directory named %s, stopping!'%self.args['InFolder'], pre='Already Exists!', level=3, msgBar=self.dlg.msgBar)
            return
        os.mkdir( self.args['InFolder'])
        log( self.args['InFolder'],pre='Created directory',level=0, msgBar=self.dlg.msgBar)
        '''
        spain look up table'''
        copy( os.path.join( self.plugin_dir, 'spain_lookup_table.csv') , self.args['InFolder'])
        '''
        fuels'''
        copy( self.dlg.state['layerComboBox_fuels'].publicSource() , 
                os.path.join( self.args['InFolder'], 'fuels.asc'))
        log( 'fuels copied',level=0, msgBar=self.dlg.msgBar)
        ''' 
        elevation cbh cbd ccf'''
        for name in ['elevation', 'cbh', 'cbd', 'ccf']:
            layer = self.dlg.state['layerComboBox_'+name]
            if layer:
                if layer.type() == QgsMapLayerType.RasterLayer:
                    copy( self.dlg.state['layerComboBox_'+name].publicSource() , 
                        os.path.join( self.args['InFolder'], name+'.asc'))
                    log( name+' layer copied', level=0, msgBar=self.dlg.msgBar)
        '''
        weather'''
        if self.dlg.state['radioButton_weatherConstant']:
            ''' read dial and slider to generate Weather.csv '''
            nrows = self.dlg.state['spinBox_windConstLen']
            iname = self.project.baseName()
            if iname == '':
                iname = 'Jaime'
            Instance = [ iname ] *nrows
            FireScenario = [ 2 ] *nrows
            dt = [ (self.now + timedelta(hours=i)).isoformat(timespec='minutes') for i in range(nrows)]
            WD = [ self.dlg.state['spinBox_windDirection'] ] * nrows
            WS = [ self.dlg.state['spinBox_windSpeed'] ] * nrows
            df = DataFrame( np.vstack((Instance,dt,WD,WS,FireScenario )).T, 
                    columns=['Instance','datetime','WD','WS', 'FireScenario'])
            df.to_csv( os.path.join( self.args['InFolder'],'Weather.csv'), header=True, index=False)
            log( 'speed:%s direction:%s'%(WS,WD), pre='Constant Wind', level=4, msgBar=self.dlg.msgBar)
        elif self.dlg.state['radioButton_weatherFile']:
            ''' copy weather file '''
            copy( self.dlg.state['fileWidget_weatherFile'], os.path.join( self.args['InFolder'], 'Weather.csv'))
            log( 'weather file copied', level=0, msgBar=self.dlg.msgBar)
        elif self.dlg.state['radioButton_weatherFolder']:
            ''' copy weather folder '''
            dst = os.path.join( self.args['InFolder'],'Weathers')
            os.mkdir(dst)
            for filename in glob( self.dlg.state['fileWidget_weatherFolder']+sep+'Weather[0-9]*.csv'):
                copy( filename, dst)
            log( 'weather folder copied', level=0, msgBar=self.dlg.msgBar)
        ''' 
        ignitions '''
        if self.dlg.state['radioButton_ignitionPoints']:
            ''' match layer points to raster layer coords, write Ignitions.csv with cell id '''
            points = self.dlg.state['layerComboBox_ignitionPoints']
            raster = self.dlg.state['layerComboBox_fuels']
            ''' match '''
            cellIds, _, _ = matchPoints2Raster( raster, points)
            Ncell = [ c+1 for c in cellIds ]
            if not Ncell:
                log( 'for %s into fuel raster (check crs)'%points.name(), pre='No matching point', level=3, msgBar=self.dlg.msgBar)
                return
            # TODO simulator accepts more than 1 point
            #data = { 'Year':None, 'Ncell': Ncell }
            data = { 'Year':1, 'Ncell': [Ncell[0]] }
            df = DataFrame.from_dict( data)
            #df.fillna(1, inplace=True)
            df.to_csv( os.path.join( self.args['InFolder'],'Ignitions.csv'), header=True, index=False)
            log( 'written', pre='Ignition points', level=0, msgBar=self.dlg.msgBar)

        elif self.dlg.state['radioButton_ignitionProbMap']:
            ipm_layer = self.dlg.state['layerComboBox_ignitionProbMap']
            copy( ipm_layer.publicSource() , os.path.join(self.args['InFolder'],'py.asc'))
            log( 'ignitionProbMap copied', level=0, msgBar=self.dlg.msgBar)

    def slot_trySelectRaster(self, layer):
        try:
            if not layer:
                return
            name = self.dlg.sender().objectName()
            if not layer.type() == QgsMapLayerType.RasterLayer:
                log( '%s selected layer %s'%(name,layer.name()), pre='Not Raster!', level=2, msgBar=self.dlg.msgBar)
                return
            ret, val = check_gdal_driver_name( layer, driver_name='AAIGrid')
            if not ret:
                log( '%s selected layer %s has %s driver. Translate to AAIGrid!'%(name,layer.name(),val), pre='Not AAIGrid', level=2, msgBar=self.dlg.msgBar)
                return
            log( '%s selected layer %s'%(name,layer.name()), pre='Is AAIGrid raster!' , level=4, msgBar=self.dlg.msgBar)
        except Exception as e:
            log(e, pre='%s selected layer %s Exception'%(name,layer.name()), level=3, msgBar=self.dlg.msgBar)

    def slot_layerComboBox_ignitionPoints_layerChanged(self, layer):
        def warn_reject(msg):
            self.dlg.radioButton_ignitionRandom.setChecked(True)
            log( 'layer '+layer.name(), pre=msg, level=2,msgBar=self.dlg.msgBar)
        try:
            if not layer:
                return
            if not layer.type() == QgsMapLayerType.VectorLayer:
                warn_reject('Not vector!')
                return
            if not layer.wkbType() == QgsWkbTypes.Point:
                warn_reject('Not with Points!')
                return
            pts = [ f.geometry() for f in layer.getFeatures() \
                    if fdoCheck( f, 'geometry') and \
                       f.geometry().wkbType() == QgsWkbTypes.Point]
            num_pts = len(pts)
            if num_pts == 0:
                warn_reject('0 points found!')
                return
            if num_pts == 1:
                log( 'from %s layer '%layer.name(), pre='Read point!', level=4, msgBar=self.dlg.msgBar)
            if num_pts > 1:
                log('Only the first one will be used! from %s layer'%layer.name(), pre='>1 point!', level=2, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_ignitionPoints.setChecked(True)
        except Exception as e:
            log( e, pre='Ignition Point layer exception!', level=2, msgBar=self.dlg.msgBar)

    def slot_fileWidget_weatherFolder_fileChanged(self, directory):
        def restore():
            self.dlg.fileWidget_weatherFolder.blockSignals(True)
            self.dlg.fileWidget_weatherFolder.setFilePath( self.project.absolutePath())
            self.dlg.fileWidget_weatherFolder.blockSignals(False)
            self.dlg.radioButton_weatherConstant.setChecked(True)
            self.dlg.args['nweathers'] = 0
        try:
            ''' count sequential Weather files '''
            i=1
            while os.path.isfile( os.path.join( directory, 'Weather'+str(i)+'.csv')):
                i+=1
            i-=1
            if i==0: 
                ''' restore '''
                log( 'Weather files must be a consecutive numbered sequence [1..N]', pre='No Weather[1..N].csv files', level=2, msgBar=self.dlg.msgBar)
                restore()
                return
            log(  'Found in %s'%directory, pre='Weathers[1..%s].csv'%i, level=4, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_weatherFolder.setChecked(True)
            self.dlg.state['radioButton_weatherFolder'] = True
            self.dlg.state['fileWidget_weatherFolder'] = directory
            self.dlg.args['nweathers'] = i
        except Exception as e:
            log( e, pre='Weather Folder %s exception'%directory, level=2, msgBar=self.dlg.msgBar)
            restore()

    def slot_fileWidget_weatherFile_fileChanged(self, filepath):
        def restore():
            self.dlg.fileWidget_weatherFile.blockSignals(True)
            self.dlg.fileWidget_weatherFile.setFilePath( self.project.absolutePath())
            self.dlg.fileWidget_weatherFile.blockSignals(False)
            self.dlg.radioButton_weatherConstant.setChecked(True)
        try:
            df = read_csv( filepath)
            if 'WS' not in df.columns or 'WD' not in df.columns or len(df)==0:
                log(  os.path.basename(filepath)+' file does not contain them', pre='Missing WD or WS columns!', level=2, msgBar=self.dlg.msgBar)
                restore()
                return
            log( 'has WD & WS columns, %s hours (rows)'%len(df), pre=os.path.basename(filepath), level=4, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_weatherFile.setChecked(True)
            self.dlg.state['radioButton_weatherFile'] = True
            self.dlg.state['fileWidget_weatherFile'] = filepath
        except Exception as e:
            log( e, pre='Single .csv file %s exception'%filepath, level=2, msgBar=self.dlg.msgBar)
            restore()

    def makeArgs(self):
        ''' 0 empty args
            1 update with dlg values from spinboxes 
                delete extra ui spinboxes helpers
            2 update with ui logic
            2a  weathers
            2b  ignitions
            2c  nsims
            3 delete default args
            4 update with argparse dialog 
                if opened: with true clicked boxes
                set In|OutFolders = Instance+now
            5 generate command line string 
        '''
        # 0
        args = {}
        gen_cmd = ''
        # 1
        args.update( { o.objectName()[o.objectName().index('_')+1:]: o.value() 
            for o in self.dlg.findChildren( (QDoubleSpinBox, QSpinBox), 
                                        options= Qt.FindChildrenRecursively)})
        args.update( { o.objectName()[o.objectName().index('_')+1:]: o.isChecked()
            for o in self.dlg.findChildren( QCheckBox,
                                        options= Qt.FindChildrenRecursively) if o.isChecked()})
        args.pop('windDirection')
        args.pop('windSpeed')
        args.pop('windConstLen')
        # 1 landscape canopy logic
        if any([ self.dlg.state['layerComboBox_cbd'],
                 self.dlg.state['layerComboBox_cbh'],
                 self.dlg.state['layerComboBox_ccf']]):
            args['cros'] = True
        # 2a weather logic
        if self.dlg.state['radioButton_weatherFolder']:
            args['WeatherOpt'] = 'random'
            args['nweathers'] = self.dlg.args['nweathers']
            #len(list(Path(self.dlg.state['fileWidget_weatherFolder']).glob('Weather[0-9]*.csv')))
        elif self.dlg.state['radioButton_weatherFile'] or \
             self.dlg.state['radioButton_weatherConstant']:
             args['WeatherOpt'] = 'rows'
        # 2b ignition logic
        if self.dlg.state['radioButton_ignitionPoints']:
            args['ignitions'] = True
        else:
            args.pop('IgRadius')
        # 2c nsims logic
        if args['nsims'] == 1:
            args['grids'] = True
        else:
            args['finalGrid'] = True
        log('make args step 2',args, level=0)
        # 2d crow fire logic
        # TODO ? [ 'OutFl', 'OutIntensity', 'OutRos']
        if 'OutCrown' in args.keys() or 'OutCrownConsumption' in args.keys():
            args['cros'] = True
        # 2e betweenness_centrality
        if self.dlg.state['checkBox_betweennessCentrality']:
            args['OutMessages'] = True
        # 3 discard default value args 
        popkeys = []
        for dkey in self.default_args:
            for akey in args:
                if dkey == akey and self.default_args[dkey] == args[akey]:
                    popkeys += [akey]
        for akey in popkeys: 
            args.pop(akey)
        log('make args step 3',args, level=0)
        # 4 update argparse dialog
        self.now_str = self.now.strftime('%y-%m-%d_%H-%M-%S')
        if self.first_start_argparse:
            ''' never opened '''
            args['InFolder'] = Path( self.project.absolutePath(), 'Instance'+self.now_str)
            args['OutFolder'] = Path( args['InFolder'], 'results')
        else:
            ''' did opened '''
            args.update(self.argdlg.gen_args)
            ''' but didnt mention ioFolder '''
            if 'InFolder' not in self.argdlg.gen_args.keys():
                args['InFolder'] = Path( self.project.absolutePath(), 'Instance'+self.now_str)
            else:
                args['InFolder'] = Path( args['InFolder'])
            if 'OutFolder' not in self.argdlg.gen_args.keys():
                args['OutFolder'] = Path( args['InFolder'], 'results')
            else:
                args['OutFolder'] = Path( args['OutFolder'])
            self.proc_dir = self.argdlg.fileWidget_directory.filePath()
            self.proc_exe = self.argdlg.header
        log('make args step 4',args, level=0)
        # 5 generate command line options
        for key,val in args.items():
            if key in self.parser.keys():
                if self.parser[key]['type'] is None:
                    gen_cmd += self.parser[key]['option_strings'][0] + ' '
                else:
                    if key!='InFolder':
                        gen_cmd += self.parser[key]['option_strings'][0] + ' ' + str(args[key]) + ' '
                    else:
                        gen_cmd += self.parser[key]['option_strings'][0] + ' ' + str(args[key]) + sep + ' '
        self.args = args
        self.gen_cmd = gen_cmd 
        log('make args step 5',args, level=0)
        log('make args step 5',gen_cmd, level=0)

    def slot_restoreDefaults(self):
        if not self.first_start_dialog:
            self.first_start_dialog = True
            self.dlg.destroy()
        if not self.first_start_argparse:
            self.first_start_argparse= True
            self.argdlg.destroy()

    def checkMap(self):
        '''
        layerComboBox_ignitionPoints <- no need to be AAIGRID
        layerComboBox_ignitionProbMap
        layerComboBox_cbd
        layerComboBox_fuels
        layerComboBox_ccf
        layerComboBox_elevation
        layerComboBox_cbh
        '''
        prefix = 'layerComboBox_'
        pl = len(prefix)
        for key in filter( lambda key:  key[:pl] == prefix, self.dlg.state):
            if layer := self.dlg.state[key]:
                if key[pl:] != 'ignitionPoints':
                    ret, val = check_gdal_driver_name( layer, driver_name='AAIGrid')
                    if not ret:
                        log( '%s selected layer %s has %s driver. Translate to AAIGrid!'%(key, layer.name(),val), pre='Not AAIGrid', level=2, msgBar=self.dlg.msgBar)
                        return False

                if layer.crs() == QgsCoordinateReferenceSystem():
                    log('has not been set for',layer.name(),'in', key, pre='CRS error', level=3, msgBar=self.dlg.msgBar)
                    return False
                if layer.crs() != self.crs:
                    log(str(layer.crs())+' is different from project '+str(self.crs)+'in'+str(key), pre='CRS error', level=3, msgBar=self.dlg.msgBar)
                    return False
        ''' check if ignitionPoints layer has points '''
        if self.dlg.state['radioButton_ignitionPoints']:
            numPoints, msg = checkLayerPoints(self.dlg.state['layerComboBox_ignitionPoints'])
            if numPoints < 1:
                log('problem: '+msg, pre='Ignition Point!', level=3, msgBar=self.dlg.msgBar)
                return False
        return True

    def updateProject(self):
        self.now = datetime.now()
        self.project = QgsProject().instance()
        self.crs = self.project.crs()
        self.extent = self.dlg.state['layerComboBox_fuels'].extent()

    def run_All(self):
        ''' run simulation '''
        self.dlg.updateState()
        self.updateProject()
        if not self.checkMap():
            return
        self.makeArgs()
        self.geopackage = Path( self.args['OutFolder'], 'outputs.gpkg')
        self.out_gpkg = Path( self.args['OutFolder'], 'outputs.gpkg')
        self.stats_gpkg = Path( self.args['OutFolder'], 'statistics.gpkg')
        self.makeInstance()
        self.externalProcess_start()

    def externalProcess_message(self, s):
        self.dlg.plainTextEdit.appendPlainText(s)

    def externalProcess_kill(self):
        if self.proc:
            self.externalProcess_message('Killing run process with state: '+self.name_state[self.proc.state()])
            self.proc.kill()
            return
        log('Nothing to kill', pre='Run process', level=1, msgBar=self.dlg.msgBar)

    def externalProcess_terminate(self):
        if self.proc:
            self.externalProcess_message('Terminating run process with state: '+self.name_state[self.proc.state()])
            self.proc.terminate()
            return
        log('Nothing to terminate', pre='Run process', level=1, msgBar=self.dlg.msgBar)

    def externalProcess_start(self):
        if self.proc is None:
            self.externalProcess_message('Starting run process '+self.gen_cmd)
            log('Starting run process '+self.gen_cmd,level=0)
            self.proc = QProcess()
            self.proc.setInputChannelMode(QProcess.ForwardedInputChannel)
            self.proc.setProcessChannelMode( QProcess.SeparateChannels)
            self.proc.readyReadStandardOutput.connect(self.externalProcess_handle_stdout)
            self.proc.readyReadStandardError.connect(self.externalProcess_handle_stderr)
            self.proc.stateChanged.connect(self.externalProcess_handle_state)
            self.proc.finished.connect(self.externalProcess_finished)  # Clean up once complete.
            self.proc.setWorkingDirectory( self.proc_dir)
            self.externalProcess_message('workdir %s'%self.proc_dir)
            ar = shlex_split( self.proc_exe +' '+ self.gen_cmd , posix="win" not in sys.platform )
            self.externalProcess_message('args %s'%ar)
            log( 'ar', *ar, level=0)
            self.proc.start( ar[0], ar[1:] )
            self.externalProcess_message('Started')
            log('Started',level=0)
            ''' debug basic
            self.proc.setWorkingDirectory( os.path.join( self.plugin_dir, 'extras'))
            self.proc.start("python3", ['dummy_proc.py'])
            '''

    def externalProcess_start_dev(self):
        if self.first_start_argparse:
            log('dev dialog has never been opened (not created)', pre="Can't run dev mode", level=2)
            return
        if self.proc:
            log('Process is running', pre="Can't run dev mode", level=2)
            return

        self.dlg.updateState()
        self.updateProject()
        self.checkMap()
        header, arg_str, gen_args, workdir = self.argdlg.get()
        self.args['OutFolder'] = Path(gen_args['OutFolder'])
        #TODO
        #self.geopackage = os.path.join( self.args['OutFolder'], 'outputs.gpkg')
        self.geopackage = Path( self.args['OutFolder'], 'outputs.gpkg')
        self.out_gpkg = Path( self.args['OutFolder'], 'outputs.gpkg')
        self.stats_gpkg = Path( self.args['OutFolder'], 'statistics.gpkg')

        self.proc = QProcess()
        self.proc.setInputChannelMode( QProcess.ForwardedInputChannel)
        self.proc.setProcessChannelMode( QProcess.SeparateChannels)
        self.proc.readyReadStandardOutput.connect( self.externalProcess_handle_stdout)
        self.proc.readyReadStandardError.connect( self.externalProcess_handle_stderr)
        self.proc.stateChanged.connect( self.externalProcess_handle_state)
        self.proc.finished.connect( self.externalProcess_finished)

        log('Starting DEV run'+arg_str,level=0)
        self.proc.setWorkingDirectory( workdir)
        ar = shlex_split( header + ' ' + arg_str )
        self.proc.start( ar[0], ar[1:] )
        self.externalProcess_message('Started DEV run:\n\t%s\n\t%s'%(workdir,ar))

    def externalProcess_handle_stderr(self):
        data = self.proc.readAllStandardError()
        stderr = bytes(data).decode("utf8")
        self.externalProcess_message('!@#$%^&* stdError stream:\n'+stderr)

    def externalProcess_handle_stdout(self):
        data = self.proc.readAllStandardOutput()
        stdout = bytes(data).decode("utf8")
        self.externalProcess_message(stdout)

    def externalProcess_handle_state(self, state):
        self.externalProcess_message('State changed: '+self.name_state[state])

    def externalProcess_finished(self):
        self.externalProcess_message("Process finished.")
        self.proc = None
        self.after()

    def after(self):
        ''' After the simulation, check if then do:
            - if output folder exists, continue, else abort
            - if logfile exists, load ignition points
            - if Grids folder exists load fire scars, evolution or mean
            - if any of the 5 indicators folder exists, load them or mean them
        '''
        # out folder not exists stop
        if not self.args['OutFolder'].is_dir():
            log('results folder',self.args['OutFolder'], pre='Does NOT exist', msgBar=self.dlg.msgBar, level=3)
            return
        '''
        # get args
        if 'nsims' in self.args.keys():
            nsims = self.args['nsims']
        else:
            nsims = self.default_args['nsims']
        '''
        # logFile for: ignition points
        baseLayer = self.dlg.state['layerComboBox_fuels']
        if Path(self.args['OutFolder'], 'LogFile.txt').is_file():
            ''' open file '''
            with open( self.args['OutFolder'] / 'LogFile.txt', 'rb', buffering=0) as afile:
                logText = afile.read().decode()
            ''' print into run text area '''
            self.externalProcess_message( logText)
            ''' process logfile '''
            layerName = 'Ignition_Points'
            out_gpkg = Path( self.args['OutFolder'], layerName+'.gpkg')
            self.task['log'] = QgsTask.fromFunction( layerName, afterTask_logFile2, on_finished=self.on_finished, 
                    logText=logText, layerName=layerName, baseLayer=baseLayer, out_gpkg=out_gpkg)
            self.task['log'].taskCompleted.connect( partial( self.ui_addVectorLayer, out_gpkg, layerName, 'points_layerStyle.qml'))
            self.taskManager.addTask( self.task['log'])
        else:
            log('LogFile.txt not available', pre='No simulation log', level=3, msgBar=self.dlg.msgBar)
        ''' Grids '''
        if Path(self.args['OutFolder'], 'Grids').is_dir():
            log('processing', pre='Grids found!', level=4, msgBar=self.dlg.msgBar)
            layerName = 'FireScar'
            #assert isinstance( self.extent , QgsRectangle)
            #assert isinstance( self.crs , QgsCoordinateReferenceSystem)
            self.task[layerName] = after_ForestGrid( layerName, layerName, self.iface, self.dlg, self.args, self.extent, self.crs, self.plugin_dir)
            self.taskManager.addTask( self.task[layerName])
        else:
            log('Grids folder not available', pre='No Grids', level=3, msgBar=self.dlg.msgBar)
        ''' stats '''
        doit = ['OutFl'               in self.args.keys(),
                'OutIntensity'        in self.args.keys(),
                'OutRos'              in self.args.keys(),
                'OutCrownConsumption' in self.args.keys() and 'cros' in self.args.keys(),
                'OutCrown'            in self.args.keys() and 'cros' in self.args.keys()]
        dirNames = ['FlameLength', 'Intensity', 'RateOfSpread', 'CrownFractionBurn','CrownFire'] 
        fileNames = ['FL', 'Intensity', 'ROSFile', 'Cfb', 'Crown']
        layerNames = ['Flame_Length', 'Byram_Intensity', 'Hit_RateOfSpread', 'CrownFire_FuelConsumptionRatio', 'CrownFire_Scar']
        ''' background tasks '''
        for do, dn, fn, ln in zip(doit, dirNames, fileNames, layerNames):
            if do:
                if Path(self.args['OutFolder'], dn).is_dir(): 
                    self.task[ln] = after_asciiDir( ln, self.iface, self.dlg, self.args, dn, fn, ln, Path( self.args['OutFolder'], ln+'.gpkg'), self.stats_gpkg, self.extent, self.crs)
                    self.taskManager.addTask( self.task[ln])
                else:
                    log('folder not available', pre='No '+dn, level=3, msgBar=self.dlg.msgBar)
        # TODO CrownFire is bool but loaded as float32
        # modify or create proper qgsTask

        if Path(self.args['OutFolder'], 'Messages').is_dir():
            log('processing', pre='Messages found!', level=4, msgBar=self.dlg.msgBar)
            name = 'betweenness_centrality'
            self.task[name] = after_betweenness_centrality( name, self.iface, self.dlg, self.args, 'Messages', 'MessagesFile', self.extent, self.crs, self.plugin_dir)
            self.taskManager.addTask( self.task[name])

    def on_finished(self, exception, value=None):
        ''' default finish qgs task '''
        if not exception:
            if value:
                self.iface.messageBar().pushMessage('task finished & returned: {}'.format(value))
            else:
                self.iface.messageBar().pushMessage('task finished')
        else:
            self.iface.messageBar().pushMessage(str(exception))

    def ui_addVectorLayer(self, geopackage, layerName, styleName):
        ''' load a layer '''
        vectorLayer = self.iface.addVectorLayer( str(geopackage)+'|layername='+layerName, layerName, 'ogr')
        vectorLayer.loadNamedStyle( os.path.join( self.plugin_dir, 'img'+sep+styleName))

    def slot_doit(self):
        ''' this connects to the unnamed button on the run tab
            is mainly for live debugging stuff '''
        self.dlg.updateState()
        self.updateProject()
        self.makeArgs()
        #after(self)
        if not Path(self.args['OutFolder'], 'Messages').is_dir():
            return
        directory = Path(self.args['OutFolder'], 'Messages')
        file_name = 'MessagesFile'
        file_list = sorted( directory.glob( file_name+'[0-9]*.csv'))
        file_string = ' '.join([ f.stem for f in file_list ])
        
        # sort acording to simulation number
        sim_num = np.fromiter( re.findall( '([0-9]+)', file_string), dtype=int, count=len(file_list))
        asort = np.argsort( sim_num)
        sim_num = sim_num[ asort]
        file_list = np.array( file_list)[ asort]
        
        # sim stats
        num_width = len(str(np.max( sim_num)))
        nsim = len(sim_num)
        
        # load all data as numpy arrays
        data = []
        for afile in file_list:
            #data += [ np.loadtxt( afile, delimiter=',', dtype=[('i',np.int32),('j',np.int32),('t',np.int16),('hros',np.float32)])]
            data +=[ np.loadtxt( afile, delimiter=',', dtype=[('i',np.int32),('j',np.int32),('t',np.int16)], usecols=(0,1,2))]
            #print('read file',afile)
        
        # make a graph with keys=simulations, weights=burnt time
        MDG = nx.MultiDiGraph()
        for k,dat in enumerate(data):
            func = np.vectorize(lambda x:{'weight':x})
            # ebunch_to_add : container of 4-tuples (u, v, k, d) for an edge with data and key k
            bunch = np.vstack(( dat['i'], dat['j'], [k]*len(dat), func(dat['t']) )).T
            MDG.add_edges_from( bunch)
            print('sim',k,bunch[:3])
        
        # outputs {nodes:betweenness_centrality_float_value}
        centrality = nx.betweenness_centrality(MDG, weight='weight')
        #log(centrality, level=0)

        layer = self.dlg.state['layerComboBox_fuels']
        W,H = layer.width(), layer.height()
        centrality_xy = [ [*id2xy( key-1, W, H), value] for key,value in centrality.items() ]
        centrality_array = np.zeros((H,W), dtype=np.float32)

        gpkg = Path(self.args['OutFolder'], 'bc.gpkg')
        layerName='betweenness_centrality'
        for x,y,v in centrality_xy:
            centrality_array[y,x]=v 
        array2rasterFloat32( centrality_array, layerName, gpkg, self.extent, self.crs, nodata = 0.0)
        #load
        layer = self.iface.addRasterLayer('GPKG:'+str(gpkg)+':'+layerName, layerName)
        minValue = layer.dataProvider().bandStatistics(1, QgsRasterBandStats.Min).minimumValue
        maxValue = layer.dataProvider().bandStatistics(1, QgsRasterBandStats.Max).maximumValue
        rasterRenderInterpolatedPseudoColor(layer, minValue, maxValue)
