# -*- coding: utf-8 -*-
__author__ = "Fernando Badilla"
__email__ = "fbadilla@ing.uchile.cl"
__version__ = "$Format:%H$"
__license__ = "GPLv3"
"""
/***************************************************************************
 fire2amClass
                                 A QGIS plugin
 Simulate a forest fires under different weather and fire model scenarios
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-02-07
        copyright            : (C) 2023 by fdobadvel (gui) & fire2a team
        email                : fire2a@fire2a.com
        git sha              : $Format:%H$
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
 This script initializes the plugin, making it known to QGIS.
"""
from importlib.util import find_spec
from pathlib import Path

# from pip import main as pip_main


# noinspection PyPep8Naming
def classFactory(iface):  # pylint: disable=invalid-name
    """Load fire2amClass class from file fire2amClass.

    :param iface: A QGIS interface instance.
    :type iface: QgsInterface
    """
    # modules = Path(Path.cwd(),'requirements_import_names.txt').read_text().split()
    modules = Path(Path(__file__).parent, "requirements_import_names.txt").read_text().split()
    distributions = Path(Path(__file__).parent, "requirements.txt").read_text().split()
    error = False
    not_found = []
    for mod, dist in zip(modules, distributions):
        if find_spec(mod):
            pass
        else:
            not_found += [mod]
            error = True
            # pip_main(["install", dist])
    if error:
        from .err_dialog import ErrDialog

        return ErrDialog(iface, not_found)
    #
    from .fire2am import fire2amClass

    return fire2amClass(iface)
